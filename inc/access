# Define the access restrictions
# The following tags define the restrictions:
# mkgmap:bicycle
# mkgmap:foot
# mkgmap:car
# mkgmap:truck
# mkgmap:taxi
# mkgmap:bus
# mkgmap:emergency
# mkgmap:delivery
# A class is not allowed to use the way if its tag is set to 'no'

# First set access settings with high priority.
#
# In case a way is tagged with 
#    highway=motorway;access=yes 
# we assume that foot and bikes are not allowed anyhow.

highway=* & motorroad=yes                  { add bicycle=no; add foot=no; }
highway=motorway | highway=motorway_link   { add bicycle=no; add foot=no; }

# ways with 'disused=yes' shouldn't used for routing, sometimes they are really expensive
highway=*
  & disused=yes
    { addaccess 'no'; }

# some access rules with exceptions
highway=* 
  & access ~ '.*(agricultural|forestry).*'
    {
      add foot=yes; 
      addaccess 'no'
      }

# Now fill the access tree (http://wiki.openstreetmap.org/wiki/Key:access) 
# This is required so that subsequent rules do not add a tag (bicycle) which is already defined by a higher tag (vehicle) 
access=*             { add foot='${access}'; 
                       add vehicle='${access}'; }
vehicle=*            { add bicycle='${vehicle}'; 
                       add motor_vehicle='${vehicle}'; }
motor_vehicle=*      { add motorcar='${motor_vehicle}'; 
                       add goods='${motor_vehicle}'; 
                       add hgv='${motor_vehicle}'; 
                       add psv='${motor_vehicle}'; 
                       add emergency='${motor_vehicle}'; }
psv=*                { add taxi='${psv}'; 
                       add bus='${psv}'; }

# Include country specific access rules that are derived from the highway type
include '../inc/access_country';

## limit routing over bad pathes
highway=path
           & (smoothness~'.*(bad|horrible|impassable)' |
              sac_scale~'.*(mountain|alpine)_hiking' |
              mtb:scale>0 |
              mtb:scale:imba>0)
                {
                  add foot=yes ;
                  add bicycle=no ;
                  addaccess 'no' ;
                  }

# Add common access rules that are derived from the highway type
highway=path
                { add foot=yes ;
                  add bicycle=yes ;
                  addaccess 'no' ;
                  }

highway=steps|
  highway=footway |
  railway=platform
                {
                  add foot=yes ;
                  addaccess 'no' ;
                  }

highway=pedestrian & area!=*
                 {
                  add motor_vehicle=no;
                  add bicycle=no
                  }

highway=bridleway
                {
                  addaccess 'no'
                  }

highway=cycleway
                {
                  add bicycle=yes ;
                  addaccess 'no' ;
                  }

# throughroute cannot be handled differently for different vehicle types
# Therefore we have to choose one vehicle type - and the winner is: motorcar

highway=*
  & (motor_vehicle ~ '.*(customers|delivery|destination).*' |
     motorcar ~ '.*(customers|delivery|destination).*' |
     vehicle ~ '.*(customers|delivery|destination).*')
                {
                  set mkgmap:throughroute=no;
                  set motorcar=yes;
                 }

highway=*
  & access ~ '.*(customers|delivery|destination).*'
                 {
                  set mkgmap:throughroute=no;
                  set access=yes;
                 }

## this rule should prevent routing through narrow streets with motorvehicles, 

highway=*
    & (maxwidth<2.0 | width<2.0)
                {
                  set motor_vehicle=no;
                }

## rules to prevent using small or bad ways with vehicles

highway=*
    & (maxwidth<1.0 | width<1.0)
                {
                  add foot=yes;
                  set vehicle=no;
                }

## mkgmap:unpaved=1 is set in pre_lines, here only check for some types of ways
## this should prevent routing, if there is no special reason

highway=track
            & mkgmap:unpaved=1
            & (tracktype~'grade[3-6]' |
               tracktype!=*)
                {
                  add foot=yes ;
                  addaccess 'no' ;
                }

#-----------------------------------------------------------------------------
# Normalize values that indicate a restriction to 'no'
motorcar ~ '.*(private|agricultural|forestry).*'                            { set motorcar=no }
motor_vehicle ~ '.*(private|agricultural|forestry).*'                       { set motor_vehicle=no }
vehicle ~ '.*(private|agricultural|forestry).*'                             { set vehicle=no }
foot ~ '.*(private|agricultural|forestry).*'                                { set foot=no }
bicycle ~ '.*(private|agricultural|forestry).*'                             { set bicycle=no }
goods ~ '.*(private|agricultural|forestry).*'                               { set goods=no }
hgv ~ '.*(private|agricultural|forestry).*'                                 { set hgv=no }
bus ~ '.*(private|agricultural|forestry).*'                                 { set bus=no }
taxi ~ '.*(private|agricultural|forestry).*'                                { set taxi=no }
emergency ~ '.*(private|agricultural|forestry).*'                           { set emergency=no }

# Normalize values that indicate a restriction to 'yes'
motorcar ~ '.*(designated|permissive|official|allowed).*'                   { set motorcar=yes }
motor_vehicle ~ '.*(designated|permissive|official|allowed).*'              { set motor_vehicle=yes }
vehicle ~ '.*(designated|permissive|official|allowed).*'                    { set vehicle=yes }
foot ~ '.*(designated|permissive|official|allowed).*'                       { set foot=yes }
bicycle ~ '.*(designated|permissive|official|allowed|dismount).*'           { set bicycle=yes }
goods ~ '.*(designated|permissive|official|allowed).*'                      { set goods=yes }
hgv ~ '.*(designated|permissive|official|allowed).*'                        { set hgv=yes }
bus ~ '.*(designated|permissive|official|allowed).*'                        { set bus=yes }
taxi ~ '.*(designated|permissive|official|allowed).*'                       { set taxi=yes }
emergency ~ '.*(designated|permissive|official|allowed).*'                  { set emergency=yes }
access ~ '.*(designated|permissive|official|allowed).*'                     { set access=yes }

## some access rules for node objects, this rules would be applied to short part of a way,
## if the node is a member of this way

# add access = yes to enable routing through this barriers
railway=level_crossing &
    crossing:barrier!=no
          {
            addaccess 'yes'
            }

barrier=bollard |
    barrier=cycle_barrier |
    barrier=block |
    barrier=gate |
    barrier=lift_gate |
    barrier=swing_gate |
    barrier=sally_port

          {
            add bicycle=yes;
            add foot=yes;
            set mkgmap:road-speed=1;
            }

barrier=bus_trap
          {
            add bus=yes;
            add foot=yes;
            add bicycle=yes;
            set mkgmap:road-speed=1;
            }

barrier~'.*(gate)' |
    barrier=cattle_grid |
    barrier~'.*(stile)' |
    barrier=jersey_barrier
          {
            add bicycle=yes;
            add foot=yes;
            set mkgmap:road-speed=0;
            }


# some ways are locally signed with vehicle=no, but are included in a cycle network,
# we set them to bicycle=yes to allow routing over this ways
cn_temp ~ '.*cn'        { set bicycle=yes }

# Copy the OSM access tags to the mkgmap internal tags
foot=*                  { set mkgmap:foot='${foot}' }
bicycle=*               { set mkgmap:bicycle='${bicycle}' }
motorcar=*              { set mkgmap:car='${motorcar}' }
goods=*                 { set mkgmap:delivery='${goods}' }
hgv=*                   { set mkgmap:truck='${hgv}' }
bus=*                   { set mkgmap:bus='${bus}' }
taxi=*                  { set mkgmap:taxi='${taxi}' }
emergency=*             { set mkgmap:emergency='${emergency}' }

## a catchall to define all restrictions that are not already set
access=*                { addaccess '${access}' }

# Don't route through highway=construction, they are considered unusable
highway=construction    { setaccess 'no' }
