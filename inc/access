# Define the access restrictions
# The following tags define the restrictions:
# mkgmap:bicycle
# mkgmap:foot
# mkgmap:car
# mkgmap:truck
# mkgmap:taxi
# mkgmap:bus
# mkgmap:emergency
# A class is not allowed to use the way if its tag is set to 'no'

# Germany (DEU)

highway=* & motorroad=yes
        & mkgmap:country=DEU
                        {
                          add bicycle=no;
                          add foot=no
                          }

(highway~'motorway.*' |
    highway~'trunk.*' )
        & mkgmap:country=DEU
                      {
                        add bicycle=no;
                        add foot=no
                        }

# Belgium (BEL)

highway=trunk & mkgmap:country=BEL      { add bicycle=no; add foot=no }
highway=cycleway & mkgmap:country=BEL   { add foot=yes }
highway=bridleway & mkgmap:country=BEL  { add foot=yes }

# The Netherlands (NLD)

highway=trunk & mkgmap:country=NLD      { add bicycle=no; add foot=no }
highway=cycleway & mkgmap:country=NLD   { add foot=yes }
highway=bridleway & mkgmap:country=NLD  { add foot=yes }

# Spain (ESP)

highway=trunk & mkgmap:country=ESP      { add bicycle=yes; add foot=yes }
highway=bridleway & mkgmap:country=ESP  { add bicycle=yes; add foot=yes }

# other

highway=* & motorroad=yes
                        {
                          add bicycle=no;
                          add foot=no
                          }

(highway~'motorway.*' |
    highway~'trunk.*' )
                      {
                        add bicycle=no;
                        add foot=no
                        }

## rules to prevent use small or bad ways

highway=* & disused=yes
                {
                  add access=no;
                }

highway=* 
    & highway!=track 
    & highway!=path 
    & highway!=cycleway 
    & highway!=footway 
    & highway!=pedestrian 
    & highway!=service 
    & (maxwidth<2.0 | width<2.0)
                {
                  add motor_vehicle=no;
                }

highway=* 
    & (maxwidth<1.0 | width<1.0)
                {
                  add foot=yes;
                  add access=no;
                }
 
highway=track
            & mkgmap:unpaved=1
            & (tracktype~'grade[4-6]' |
               tracktype!=*)
                {
                  add foot=yes;
                  add access=no;
                }

highway=path
           & (smoothness~'.*(bad|horrible|impassable)' |
              sac_scale~'.*(mountain|alpine)_hiking' |
              mtb:scale>0 |
              mtb:scale:imba>0)
                {
                  add foot=yes;
                  add bicycle=no;
                  add access=no;
                  }

highway=path
                { add foot=yes;
                  add bicycle=yes;
                  add access=no
                  }

highway=steps|
  highway=footway |
  railway=platform
                {
                  add foot=yes;
                  add access=no
                  }

highway=pedestrian & area!=*
                 {
                  add motor_vehicle=no;
                  add bicycle=no
                  }

highway=bridleway
                { 
                  add access=no
                  }

highway=cycleway
                {
                  add bicycle=yes;
                  add access=no
                  }

highway=* & ramp=yes
                {
                  add foot=yes;
                  add bicyle=yes
                  }

#-----------------------------------------------------------------------------
# Next line is needed, because 'motorcycle=no' makes
# nonroutable highways for motorcar

highway=* & motorcycle=no {delete motorcycle}

# Normalize values that indicate a restriction to 'no'
motorcar ~ '.*(private|agricultural|forestry|customers|delivery).*'          { set motorcar=no }
motor_vehicle ~ '.*(private|agricultural|forestry|customers|delivery).*'     { set motor_vehicle=no }
vehicle ~ '.*(private|agricultural|forestry|customers|delivery).*'           { set vehicle=no }
foot ~ '.*(private|agricultural|forestry|customers|delivery).*'              { set foot=no }
bicycle ~ '.*(private|agricultural|forestry|customers|delivery).*'           { set bicycle=no }
goods ~ '.*(private|agricultural|forestry|customers|delivery).*'             { set goods=no }
hgv ~ '.*(private|agricultural|forestry|customers|delivery).*'               { set hgv=no }
bus ~ '.*(private|agricultural|forestry|customers|delivery).*'               { set bus=no }
taxi ~ '.*(private|agricultural|forestry|customers|delivery).*'              { set taxi=no }
emergency ~ '.*(private|agricultural|forestry|customers|delivery).*'         { set emergency=no }

# Normalize values that indicate a restriction to 'yes'
motorcar ~ '.*(designated|permissive|official).*'                   { set motorcar=yes }
motor_vehicle ~ '.*(designated|permissive|official).*'              { set motor_vehicle=yes }
vehicle ~ '.*(designated|permissive|official).*'                    { set vehicle=yes }
foot ~ '.*(designated|permissive|official).*'                       { set foot=yes }
bicycle ~ '.*(designated|permissive|official).*'                    { set bicycle=yes }
goods ~ '.*(designated|permissive|official).*'                      { set goods=yes }
hgv ~ '.*(designated|permissive|official).*'                        { set hgv=yes }
bus ~ '.*(designated|permissive|official).*'                        { set bus=yes }
taxi ~ '.*(designated|permissive|official).*'                       { set taxi=yes }
emergency ~ '.*(designated|permissive|official).*'                  { set emergency=yes }

# some access rules 
access=customers | access=agricultural
                      { 
                        add foot=yes;
                        add access=no;
                        } 

access=private
                      { 
                        set access=no;
                        }

vehicle=*             {
                        set bicycle='${vehicle}';
                        set motor_vehicle='${vehicle}';
                        }

motor_vehicle=*       {
                        set motorcar='${motor_vehicle}';
                        }

motorcar=*            {
                        add goods='${motor_vehicle}';
                        add hgv='${motor_vehicle}';
                        add psv='${motor_vehicle}';
                        add emergency='${motor_vehicle}';
                        }

psv=*                 {
                        add taxi='${psv}';
                        add bus='${psv}';
                        }

# throughroute cannot be handled differently for different vehicle types
# Therefore we have to choose one vehicle type - and the winner is: motorcar
motorcar=destination
                      {
                        set mkgmap:throughroute=no;
                        set motorcar=yes
                        }

access=destination
                      {
                        set mkgmap:throughroute=no;
                        set access=yes
                        }
                        
# some ways are locally signed with vehicle=no, but are included in a cycle network, 
# therefore we set them to bicycle=yes
cn_temp ~ '.*cn' { set bicycle=yes }                        

# Copy the OSM access tags to the mkgmap internal tags
foot=*                { set mkgmap:foot='${foot}' }
bicycle=*             { set mkgmap:bicycle='${bicycle}' }
motorcar=*            { set mkgmap:car='${motorcar}' }
goods=*               { set mkgmap:delivery='${goods}' }
hgv=*                 { set mkgmap:truck='${hgv}' }
bus=*                 { set mkgmap:bus='${bus}' }
taxi=*                { set mkgmap:taxi='${taxi}' }
emergency=*           { set mkgmap:emergency='${emergency}' }

## a catchall to define all restrictions that are not already set
access=*              { addaccess '${access}' }

# Check for carpool lane (they are not really supported yet so these lines are commented)
# hov=* { add carpool='${hov}' }
# (carpool=yes | carpool=designated | carpool=permissive | carpool=official)     { set mkgmap:carpool=yes }

# Don't route through highway=construction, they are considered unusable
highway=construction {setaccess no}
