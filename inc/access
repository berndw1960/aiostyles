# Define the access restrictions
# The following tags define the restrictions:
# mkgmap:bicycle
# mkgmap:foot
# mkgmap:car
# mkgmap:truck
# mkgmap:taxi
# mkgmap:bus
# mkgmap:emergency
# mkgmap:delivery
# A class is not allowed to use the way if its tag is set to 'no'

# some access rules with exceptions
highway=* 
  & access ~ '.*(agricultural|forestry).*'
      {
      add foot=yes ;
      add vehicle='${access}' ;
      delete access ; 
      }

# The exact key/value combination access=designated should never appear on an object. 
# The value designated must be used with a specific mode of transport. 
# Examples: bicycle=designated or foot=designated.

access=designated
    { delete access }

# Include country specific access rules that are derived from the highway type
include '../inc/access_country';

# First set access settings with high priority.
#
# In case a way is tagged with 
#    highway=motorway;access=yes 
# we assume that foot and bikes are not allowed anyhow.

highway=* & motorroad=yes                  { add bicycle=no; add foot=no; }
highway=motorway | highway=motorway_link   { add bicycle=no; add foot=no; }

#some parts of bicycle routes are on ways with vehicle=*, set bicycle=yes for routing

highway=* &
    bicycle!=* &
    (rcn_network=yes |
     ncn_network=yes |
     lcn_network=yes |
     rcn=yes |
     ncn=yes |
     lcn=yes )
         {
         set bicycle=yes ;
         }

## limit routing over bad pathes

highway=path
           & (smoothness~'.*(bad|horrible|impassable)' |
              sac_scale~'.*(mountain|alpine)_hiking' |
              mtb:scale>0 |
              mtb:scale:imba>0)
                {
                  add foot=yes ;
                  add bicycle=no ;
                  addaccess 'no' ;
                  }

## this rule should prevent routing through narrow streets with motorvehicles, 

highway=*
    & (maxwidth<2.0 | width<2.0)
                {
                  set motor_vehicle=no;
                }

## rules to prevent using small or bad ways with vehicles

highway=*
    & (maxwidth<1.0 | width<1.0)
                {
                  add foot=yes;
                  set vehicle=no;
                }

# Add common access rules that are derived from the highway type

highway=path
                { add foot=yes ;
                  add bicycle=yes ;
                  addaccess 'no' ;
                  }

highway=steps|
  highway=footway |
  railway=platform
                {
                  add foot=yes ;
                  addaccess 'no' ;
                  }

highway=pedestrian & area!=*
                 {
                  add motor_vehicle=no;
                  add bicycle=no
                  }

highway=bridleway
                {
                  addaccess 'no'
                  }

highway=cycleway
                {
                  add bicycle=yes ;
                  addaccess 'no' ;
                  }

## some access rules for node objects, this rules would be applied to short part of a way,
## if the node is a member of this way

# add access = yes to enable routing through this barriers
railway=level_crossing &
    crossing:barrier!=no
          {
            addaccess 'yes'
            }

barrier~'.*(log)' &
    access=yes
        {delete access}

barrier=bollard |
    barrier=cycle_barrier |
    barrier=block |
    barrier=gate |
    barrier=kerb |
    barrier=lift_gate |
    barrier=swing_gate |
    barrier=sally_port

          {
            add bicycle=yes;
            add foot=yes;
            set mkgmap:road-speed=1;
            }

barrier=bus_trap
          {
            add bus=yes;
            add foot=yes;
            add bicycle=yes;
            set mkgmap:road-speed=1;
            }

barrier~'.*(gate)' |
    barrier=cattle_grid |
    barrier~'.*(stile)' |
    barrier=jersey_barrier
          {
            add bicycle=yes;
            add foot=yes;
            set mkgmap:road-speed=0;
            }

# ways with 'disused=yes' and similar shouldn't used for routing, sometimes they are really expensive

highway=*
    & (disused=yes |
       illegal=yes |
       informal=yes)
           { 
           setaccess 'no'; 
           }

# Don't route through highway=construction, they are considered unusable

highway=construction
           { 
           setaccess 'no' 
           }

# Now fill the access tree (http://wiki.openstreetmap.org/wiki/Key:access) 
# This is required so that subsequent rules do not add a tag (bicycle),
# which is already defined by a higher tag (vehicle) 

access=*
    {
    add foot='${access}'; 
    add vehicle='${access}'; 
    }
vehicle=*
    {
    add bicycle='${vehicle}'; 
    add motor_vehicle='${vehicle}'; 
    }
motor_vehicle=*
    {
    add motorcar='${motor_vehicle}'; 
    add goods='${motor_vehicle}'; 
    add hgv='${motor_vehicle}'; 
    add psv='${motor_vehicle}'; 
    add emergency='${motor_vehicle}'; 
    }
psv=*
    { 
    add taxi='${psv}'; 
    add bus='${psv}'; 
    }

# throughroute cannot be handled differently for different vehicle types
# Therefore we have to choose one vehicle type - and the winner is: motorcar

highway=*
    & motorcar ~ '.*(customers|delivery|destination|employees|residents|visitors).*'
        {
        set mkgmap:throughroute=no;
        set motorcar=yes;
        }

# ways with ownership shouldn't use to pass through if there is no special reason

highway=*
    & ownership ~ '.*(private).*'
        {
        set mkgmap:throughroute=no;
        }

## mkgmap:unpaved=1 is set in pre_lines, here only check for some types of ways
## this should prevent routing through bad ways, if there is no special reason

highway=track
            & mkgmap:unpaved=1
            & (tracktype~'grade[4-6]' |
               tracktype!=*)
                {
                 set mkgmap:throughroute=no ;
                }

# Normalize values that indicate a restriction to 'no'
# https://taginfo.openstreetmap.org/keys/access#values
# set motorcar only if prior rules passed without change to motorcar=yes

motorcar ~ '.*(private|employees|residents|visitors|agricultural|forestry).*'                  { add motorcar=no }
foot ~ '.*(private|employees|residents|visitors|agricultural|forestry).*'                      { set foot=no }
bicycle ~ '.*(private|employees|residents|visitors|agricultural|forestry).*'                   { set bicycle=no }
goods ~ '.*(private|employees|residents|visitors|agricultural|forestry).*'                     { set goods=no }
hgv ~ '.*(private|employees|residents|visitors|agricultural|forestry).*'                       { set hgv=no }
bus ~ '.*(private|employees|residents|visitors|agricultural|forestry).*'                       { set bus=no }
taxi ~ '.*(private|employees|residents|visitors|agricultural|forestry).*'                      { set taxi=no }
emergency ~ '.*(private|employees|residents|visitors|agricultural|forestry).*'                 { set emergency=no }

# Normalize values that indicate a restriction to 'yes'

motorcar ~ '.*(designated|permissive|permit|official|allowed).*'                   { set motorcar=yes }
foot ~ '.*(designated|permissive|permit|official|allowed).*'                       { set foot=yes }
bicycle ~ '.*(designated|permissive|permit|official|allowed|dismount).*'           { set bicycle=yes }
goods ~ '.*(designated|permissive|permit|official|allowed).*'                      { set goods=yes }
hgv ~ '.*(designated|permissive|permit|official|allowed).*'                        { set hgv=yes }
bus ~ '.*(designated|permissive|permit|official|allowed).*'                        { set bus=yes }
taxi ~ '.*(designated|permissive|permit|official|allowed).*'                       { set taxi=yes }
emergency ~ '.*(designated|permissive|permit|official|allowed).*'                  { set emergency=yes }


# Copy the OSM access tags to the mkgmap internal tags

foot=*                  { set mkgmap:foot='${foot}' }
bicycle=*               { set mkgmap:bicycle='${bicycle}' }
motorcar=*              { set mkgmap:car='${motorcar}' }
goods=*                 { set mkgmap:delivery='${goods}' }
hgv=*                   { set mkgmap:truck='${hgv}' }
bus=*                   { set mkgmap:bus='${bus}' }
taxi=*                  { set mkgmap:taxi='${taxi}' }
emergency=*             { set mkgmap:emergency='${emergency}' }

