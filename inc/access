# Define the access restrictions
# The following tags define the restrictions:
# mkgmap:bicycle
# mkgmap:foot
# mkgmap:car

## A class is not allowed to use the way if its tag is set to 'no'
## The aim is to enable cycling without violating serious rules

## Include country specific access rules that are derived from the highway type
include '../inc/access_country';

# First set access settings with high priority.
#
# In case a way is tagged with 
#    highway=motorway;access=yes 
# we assume that foot and bikes are not allowed anyhow.

highway=* & motorroad=yes                  { add bicycle=no; add foot=no; }
highway=motorway | highway=motorway_link   { add bicycle=no; add foot=no; }


## change rules order if access is set.
## access --> vehicle --> motor_vehicle

# The exact key/value combination access=designated should never appear on an object. 
# The value designated must be used with a specific mode of transport. 
# Examples: bicycle=designated or foot=designated.

access=designated
    { delete access }

# access=yes is the default value and does not usually need to be set.
# We will set the access rules later in this file

access=yes
    { delete access }
 
# access=no with bicycle=yes and/or foot=yes are to indifferent, try to
# make them more usable

highway=* 
    & access=no
    & (foot=yes | bicycle=yes)
        { 
         add motor_vehicle='${access}';
         delete access
         }

# some access rules with exceptions
highway=* 
    & access ~ '.*(agricultural|forestry).*'
    & vehicle!=*
        {
         set vehicle='${access}' ;
         delete access ; 
         }

highway=* 
    & access ~ '.*(agricultural|forestry).*'
    & motor_vehicle!=*
        {
         set motor_vehicle='${access}' ;
         delete access ; 
         }

# if both keys are set, use motor_vehicle
highway=*
     & vehicle=*
     & motor_vehicle=*
         { delete vehicle ;
          }

highway=*
    & motor_vehicle=*
    & motorcar=*
        {
         delete motorcar;
         delete motorcycle;
         }

# change motorcar to motor_vehicle if needed
highway=* 
    & motorcar=* 
    & motor_vehicle!=* 
    & vehicle!=*
        { 
         set motor_vehicle='${motorcar}' ;
         delete motorcar ;
         delete motorcycle ;
         }

# some parts of bicycle routes are on ways with vehicle=*, change the key to motor_vehicle
highway=* 
   & bicycle!=* 
   & vehicle=* 
   & (network ~ '.*(icn|ncn|rcn|lcn)' |
      icn_network=yes |
      ncn_network=yes |
      rcn_network=yes |
      lcn_network=yes |
      icn=yes |
      ncn=yes |
      rcn=yes |
      lcn=yes )
            { 
             add motor_vehicle='${vehicle}';
             delete vehicle ;
             }

highway=*
       & vehicle=no
       & (bicycle=yes |
          bicycle=designated |
          bicycle=dismount)
          { add motor_vehicle='${vehicle}';
            delete vehicle ;
            }

# Add common access rules that are derived from the highway type
# if there are exceptions like agricultural=yes, forestry=yes, destination=* or other,
# they will be ignored

highway=path
                { 
                  set motor_vehicle=no;
                  }

highway=steps |
  highway=footway 
                {
                  add vehicle=no;
                  }

highway=pedestrian & area!=*
                 {
                  add motor_vehicle=no;
                  add bicycle=no
                  }

highway=cycleway
                {
                  add motor_vehicle=no;
                  }

highway=bridleway
                {
                  add vehicle=no;
                  }

## some access rules for node objects, this rules would be applied to short part of a way,
## if the node is a member of this way

# add access = yes to enable routing through this barriers
railway=level_crossing &
    crossing:barrier!=no
          {
            addaccess 'yes'
            }

barrier~'.*(log)' &
    access=yes
        {
          add foot=yes;
          add vehicle=no;
          delete access;
          }

barrier=bollard |
    barrier=cycle_barrier |
    barrier=block |
    barrier=gate |
    barrier=kerb |
    barrier=lift_gate |
    barrier=swing_gate |
    barrier=sally_port

          {
            add bicycle=yes;
            add foot=yes;
            set mkgmap:road-speed=1;
            }

barrier=bus_trap
          {
            add foot=yes;
            add bicycle=yes;
            add motor_vehicle=no;
            set mkgmap:road-speed=1;
            }

barrier~'.*(gate)' |
    barrier=cattle_grid |
    barrier~'.*(stile)' |
    barrier=jersey_barrier
          {
            add bicycle=yes;
            add foot=yes;
            set mkgmap:road-speed=0;
            }

# Don't route through highway=construction, they are considered unusable
highway=construction
           {
            set foot=no ;
            delete bicycle ;
            delete motor_vehicle ;
            set vehicle=no
            }

# ways with 'disused=yes' and similar shouldn't used for routing, sometimes they are really expensive
highway=*
    & (disused=yes |
       illegal=yes |
       informal=yes)
           { 
            set foot=no ;
            delete bicycle ;
            delete motor_vehicle ;
            set vehicle=no
            }

## limit routing over bad pathes
highway=path
   & (smoothness~'.*(bad|horrible|impassable)' |
      sac_scale~'.*(mountain|alpine)_hiking' |
      mtb:scale>0 |
      mtb:scale:imba>0)
          { 
           set bicycle=no ;
           }

## this rule should prevent routing through narrow streets with motorvehicles, 
highway=*
   & (maxwidth<2.0 | width<2.0)
       { 
        delete vehicle;
        set motor_vehicle=no;
        }

## rule to prevent using small ways with vehicles
highway=*
   & (maxwidth<1.0 | width<1.0)
       {
        delete bicycle ;
        delete motor_vehicle ;
        set vehicle=no;
        }

# Now fill the access tree (http://wiki.openstreetmap.org/wiki/Key:access) 
# This is required so that subsequent rules do not add a tag (bicycle),
# which is already defined by a higher tag (vehicle) 

access=*
    {
    add foot='${access}'; 
    add vehicle='${access}';
    delete access ;
    }

vehicle=*
    {
    add bicycle='${vehicle}'; 
    add motor_vehicle='${vehicle}';
    delete vehicle
    }

# Prevent passage through some ways, but some devices may ignore this rule(s) 

highway=*
    & motor_vehicle ~ '.*(customers|delivery|destination|employees|residents|visitors).*'
        {
         set mkgmap:throughroute=no;
         }

# ways with ownership shouldn't use to pass through if there is no special reason

highway=*
    & ownership ~ '.*(private).*'
        {
         add mkgmap:throughroute=no;
         }

## mkgmap:unpaved=1 is set in pre_lines 
## this rule should prevent routing through bad ways, if there is no special reason

highway=track
    & mkgmap:unpaved=1
    & (tracktype~'grade[4-6]' |
       tracktype!=*)
           {
            set mkgmap:throughroute=no ;
            }

# Normalize values that indicate a restriction to 'no'
# https://taginfo.openstreetmap.org/keys/access#values


foot ~ '.*(private|employees|residents|visitors|customers|agricultural|forestry|use_sidepath).*'                      { set foot=no }
bicycle ~ '.*(private|employees|residents|destination|visitors|customers|agricultural|forestry|use_sidepath).*'       { set bicycle=no }
motor_vehicle ~ '.*(private|employees|residents|destination|visitors|customers|agricultural|forestry).*'              { set motor_vehicle=no }

# Remove values that indicate a restriction to 'yes'
# yes is default if empty

highway=* & foot!=no                                       { delete foot }
highway=* & bicycle!=no                                    { delete bicycle }
highway=* & motor_vehicle!=no                              { delete motor_vehicle }

# Copy the OSM access tags to the mkgmap internal tags

foot=*                  { set mkgmap:foot='${foot}' }
bicycle=*               { set mkgmap:bicycle='${bicycle}'}
motor_vehicle=*         { set mkgmap:car='${motor_vehicle}' }
